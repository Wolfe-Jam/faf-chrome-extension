import{F as n,b as l,t as f,a as m,i as u}from"./telemetry.CVK6_vk8.js";const R={maxAttempts:3,baseDelay:1e3,maxDelay:1e4,backoffFactor:2,timeout:3e4};class y{static instance=null;retryAttempts=new Map;retryTimers=new Map;static getInstance(){return y.instance||(y.instance=new y),y.instance}async withRecovery(e,t){const{operationId:r,context:s="unknown"}=t,o={...R,...t.retryConfig};let i=null;const d=Date.now();this.clearRetryTimer(r);for(let a=1;a<=o.maxAttempts;a++)try{if(o.timeout&&Date.now()-d>o.timeout)throw new n(l.EXTRACTION_TIMEOUT,"Operation timeout exceeded",{context:{timestamp:Date.now()}});const c=await this.executeWithTimeout(e,o.timeout);return this.retryAttempts.delete(r),a>1&&f.track("error_boundary",{type:"recovery_success",operationId:r,context:s,attemptsRequired:a,duration:Date.now()-d}),c}catch(c){if(i=c instanceof n?c:n.fromUnknown(c,{timestamp:Date.now()}),console.warn(`[${s}] Attempt ${a}/${o.maxAttempts} failed:`,{error:i.code,message:i.message,severity:i.severity}),this.retryAttempts.set(r,a),!this.shouldRetry(i,a,o.maxAttempts))break;const p=this.calculateDelay(a,o);a<o.maxAttempts&&await this.delay(p)}if(t.fallbackOperation)try{console.log(`[${s}] Trying fallback operation after ${o.maxAttempts} failed attempts`);const a=await t.fallbackOperation();return f.track("error_boundary",{type:"fallback_success",operationId:r,context:s,originalError:i?.code,duration:Date.now()-d}),a}catch(a){const c=a instanceof n?a:n.fromUnknown(a,{timestamp:Date.now()});if(f.track("error_boundary",{type:"fallback_failed",operationId:r,context:s,originalError:i?.code,fallbackError:c.code,duration:Date.now()-d}),this.compareSeverity(c.severity,i?.severity||m.LOW)>=0)throw c}throw this.retryAttempts.delete(r),f.track("error_boundary",{type:"recovery_failed",operationId:r,context:s,finalError:i?.code,attemptsUsed:o.maxAttempts,duration:Date.now()-d}),i||new n(l.UNKNOWN_ERROR,"Operation failed after all recovery attempts")}async handleError(e,t){const r=e instanceof n?e:n.fromUnknown(e);switch(f.track("error_boundary",{type:"error_handled",operationId:t.operationId,operationType:t.operationType,errorCode:r.code,severity:r.severity,recoveryStrategy:r.recoveryStrategy}),r.recoveryStrategy){case u.RETRY:return{recovered:!1,suggestion:"This issue is usually temporary. Try the operation again.",actions:["Retry now","Wait 30 seconds and retry","Refresh page and retry"]};case u.FALLBACK:return{recovered:await this.attemptFallbackRecovery(r,t),suggestion:"Switched to alternative method due to the issue.",actions:["Continue with limited functionality","Try full operation later","Check settings"]};case u.GRACEFUL_DEGRADATION:return{recovered:!0,suggestion:"Continuing with reduced functionality to work around the issue.",actions:["Continue anyway","Try on different page","Report issue"]};case u.USER_ACTION_REQUIRED:return{recovered:!1,suggestion:"User action is required to resolve this issue.",actions:r.recoveryActions};case u.RESTART_REQUIRED:return{recovered:!1,suggestion:"Extension restart is required to fix this issue.",actions:["Restart browser","Reload extension","Check for updates"]};default:return{recovered:!1,suggestion:"This error requires manual resolution.",actions:["Try again later","Check browser console","Report issue"]}}}getRetryCount(e){return this.retryAttempts.get(e)||0}clearRetryState(e){this.retryAttempts.delete(e),this.clearRetryTimer(e)}getRecoveryRecommendations(e){const t=e instanceof n?e:n.fromUnknown(e);switch(this.categorizeError(t.code)){case"platform":return{immediate:["Refresh the page","Wait for page to fully load","Try on supported platform"],followUp:["Check internet connection","Clear browser cache","Update browser"],prevention:["Use supported development platforms","Ensure stable internet connection"]};case"permissions":return{immediate:["Check extension permissions","Grant required permissions","Reload extension"],followUp:["Restart browser","Reinstall extension if needed"],prevention:["Keep extension permissions up to date","Avoid revoking permissions"]};case"performance":return{immediate:["Close unused tabs","Wait and retry","Reduce complexity"],followUp:["Restart browser","Check system resources"],prevention:["Limit concurrent operations","Use smaller code sections"]};case"network":return{immediate:["Check internet connection","Retry in a moment","Try different network"],followUp:["Clear browser cache","Disable VPN if used"],prevention:["Use stable internet connection","Avoid peak usage times"]};default:return{immediate:t.recoveryActions,followUp:["Restart browser","Check for updates"],prevention:["Keep extension updated","Use supported browsers"]}}}async executeWithTimeout(e,t){return t?Promise.race([e(),new Promise((r,s)=>{setTimeout(()=>{s(new n(l.EXTRACTION_TIMEOUT,`Operation timed out after ${t}ms`))},t)})]):e()}shouldRetry(e,t,r){return t>=r||e.severity===m.CRITICAL||e.recoveryStrategy===u.USER_ACTION_REQUIRED||e.recoveryStrategy===u.NO_RECOVERY?!1:![l.CHROME_PERMISSIONS_MISSING,l.PLATFORM_NOT_SUPPORTED,l.CONTENT_SCRIPT_CSP_VIOLATION].includes(e.code)}calculateDelay(e,t){const r=t.baseDelay*Math.pow(t.backoffFactor,e-1),s=Math.random()*.1*r;return Math.min(r+s,t.maxDelay)}async delay(e){return new Promise(t=>setTimeout(t,e))}clearRetryTimer(e){const t=this.retryTimers.get(e);t&&(clearTimeout(t),this.retryTimers.delete(e))}compareSeverity(e,t){const r=[m.LOW,m.MEDIUM,m.HIGH,m.CRITICAL];return r.indexOf(e)-r.indexOf(t)}async attemptFallbackRecovery(e,t){switch(e.code){case l.CLIPBOARD_PERMISSION_DENIED:return!0;case l.PLATFORM_DOM_ACCESS_DENIED:return!1;case l.CHROME_STORAGE_QUOTA_EXCEEDED:try{return!0}catch{return!1}default:return!1}}categorizeError(e){return e.includes("PLATFORM")?"platform":e.includes("PERMISSION")||e.includes("ACCESS")?"permissions":e.includes("TIMEOUT")||e.includes("MEMORY")||e.includes("QUOTA")?"performance":e.includes("NETWORK")||e.includes("REQUEST")?"network":"unknown"}}const h=y.getInstance();export{h as e};
