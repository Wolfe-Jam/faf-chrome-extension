#!/bin/sh

# Git pre-commit hook for FAF Chrome Extension
# Ensures code quality before commits

set -e

echo "üîç Running pre-commit checks..."

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Redirect output to stderr
exec 1>&2

# Get list of staged TypeScript/JavaScript files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "‚úÖ No TypeScript/JavaScript files to check"
    exit 0
fi

echo "üìù Checking staged files: $(echo $STAGED_FILES | wc -w) files"

# Function to check if npm command exists
check_npm() {
    if ! command -v npm >/dev/null 2>&1; then
        echo "‚ùå npm is not installed"
        exit 1
    fi
}

# Function to run command and show spinner
run_with_spinner() {
    local cmd="$1"
    local desc="$2"
    
    echo -n "üîÑ $desc... "
    
    # Run command silently and capture output
    if output=$($cmd 2>&1); then
        echo "‚úÖ"
        return 0
    else
        echo "‚ùå"
        echo "Error output:"
        echo "$output"
        return 1
    fi
}

# Check dependencies
check_npm

# 1. TypeScript type checking
echo "üîç Running type check..."
if ! npm run typecheck >/dev/null 2>&1; then
    echo "‚ùå TypeScript type check failed"
    echo "Run 'npm run typecheck' to see the errors"
    exit 1
fi
echo "‚úÖ Type check passed"

# 2. Linting
echo "üßπ Running linter..."
if ! npm run lint >/dev/null 2>&1; then
    echo "‚ùå Linting failed"
    echo "Run 'npm run lint:fix' to fix auto-fixable issues"
    exit 1
fi
echo "‚úÖ Linting passed"

# 3. Auto-format staged files
echo "üé® Auto-formatting staged files..."
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        npx biome format --write "$file" >/dev/null 2>&1 || true
        git add "$file"
    fi
done
echo "‚úÖ Files formatted"

# 4. Quick tests on changed files
echo "üß™ Running tests..."
if ! npm test -- --run --reporter=basic >/dev/null 2>&1; then
    echo "‚ùå Tests failed"
    echo "Run 'npm test' to see the failures"
    exit 1
fi
echo "‚úÖ Tests passed"

# 5. Check for debugging statements
echo "üîç Checking for debugging statements..."
DEBUG_PATTERNS="console\.(log|debug|info|warn)|debugger;?|alert\(|confirm\("

for file in $STAGED_FILES; do
    if [ -f "$file" ] && grep -nE "$DEBUG_PATTERNS" "$file" >/dev/null; then
        echo "‚ö†Ô∏è  Debug statements found in $file:"
        grep -nE "$DEBUG_PATTERNS" "$file" | head -5
        echo ""
        echo "Please remove debug statements before committing"
        echo "Use '// debug:' comment prefix if intentional"
        
        # Check if user allows debug statements
        if ! grep -q "// debug:" "$file"; then
            echo "‚ùå Commit blocked due to debug statements"
            exit 1
        fi
    fi
done
echo "‚úÖ No problematic debug statements"

# 6. Check for TODOs/FIXMEs in main branch
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" = "main" ]; then
    echo "üîç Checking for TODO/FIXME comments in main branch..."
    TODO_FILES=""
    for file in $STAGED_FILES; do
        if [ -f "$file" ] && grep -nE "TODO|FIXME|XXX" "$file" >/dev/null; then
            if ! grep -q "// allowed:" "$file"; then
                TODO_FILES="$TODO_FILES $file"
            fi
        fi
    done
    
    if [ -n "$TODO_FILES" ]; then
        echo "‚ùå TODO/FIXME comments found in main branch:"
        for file in $TODO_FILES; do
            echo "  $file"
        done
        echo "Please resolve or move to feature branch"
        exit 1
    fi
    echo "‚úÖ No TODO/FIXME comments in main branch"
fi

# 7. Check commit message format (if commit message is provided)
COMMIT_MSG_FILE="$1"
if [ -n "$COMMIT_MSG_FILE" ] && [ -f "$COMMIT_MSG_FILE" ]; then
    echo "üìù Checking commit message format..."
    COMMIT_MSG=$(head -1 "$COMMIT_MSG_FILE")
    
    # Check for conventional commits format (optional but recommended)
    if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
        echo "‚ö†Ô∏è  Consider using conventional commits format:"
        echo "   feat: add new feature"
        echo "   fix: resolve bug"
        echo "   docs: update documentation"
        echo "   style: format code"
        echo "   refactor: improve code structure"
        echo "   test: add/update tests"
        echo "   chore: maintenance tasks"
    fi
fi

# 8. Bundle size check (quick estimate)
echo "üì¶ Checking estimated bundle size..."
TOTAL_SIZE=0
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        FILE_SIZE=$(wc -c < "$file")
        TOTAL_SIZE=$((TOTAL_SIZE + FILE_SIZE))
    fi
done

# Convert to KB
SIZE_KB=$((TOTAL_SIZE / 1024))
if [ $SIZE_KB -gt 100 ]; then
    echo "‚ö†Ô∏è  Large changes detected: ${SIZE_KB}KB"
    echo "Consider splitting into smaller commits"
fi
echo "‚úÖ Size check completed (${SIZE_KB}KB)"

# 9. Security check - look for sensitive patterns
echo "üîí Security check..."
SENSITIVE_PATTERNS="password|secret|token|key.*=|api.*key"
SENSITIVE_FILES=""

for file in $STAGED_FILES; do
    if [ -f "$file" ] && grep -iE "$SENSITIVE_PATTERNS" "$file" >/dev/null; then
        if ! grep -q "// safe:" "$file"; then
            SENSITIVE_FILES="$SENSITIVE_FILES $file"
        fi
    fi
done

if [ -n "$SENSITIVE_FILES" ]; then
    echo "‚ö†Ô∏è  Potential sensitive data found:"
    for file in $SENSITIVE_FILES; do
        echo "  $file"
        grep -inE "$SENSITIVE_PATTERNS" "$file" | head -3
    done
    echo ""
    echo "Add '// safe: reason' comment if this is intentional"
    read -p "Continue with commit? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Commit aborted"
        exit 1
    fi
fi
echo "‚úÖ Security check passed"

echo ""
echo "üéâ All pre-commit checks passed!"
echo "‚úÖ Type check"
echo "‚úÖ Linting"
echo "‚úÖ Formatting"
echo "‚úÖ Tests"
echo "‚úÖ Code quality"
echo "‚úÖ Security"

exit 0